<template>
    <div ref="container" class="joker-demo-container">
        <h2>Table</h2>
        <p>
            Used to display multiple sets of structurally similar data, enabling operations like sorting, filtering, comparison, or other custom actions.
        </p>
        <h3>Basic Table</h3>
        <p>The fundamental usage of table display.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot;&gt;
        &lt;jk-table-column label=&quot;Date&quot; fixed=&quot;left&quot; key=&quot;date&quot; width=&quot;100&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
    ];
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Striped Table</h3>
        <p>Using striped tables makes it easier to differentiate between rows.</p>
        <p>
            The
            <code>stripe</code>
            property creates a striped table. It accepts a
            <code>Boolean</code>
            , defaulting to
            <code>false</code>
            . Set it to
            <code>true</code>
            to enable.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot; stripe&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
    ];
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Bordered Table</h3>
        <p>
            By default, the Table component has no vertical borders. If needed, use the
            <code>border</code>
            property, which accepts a
            <code>Boolean</code>
            —set to
            <code>true</code>
            to enable.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot; border&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
    ];
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Fixed Header</h3>
        <p>When vertical content is extensive, a fixed header can be employed.</p>
        <p>
            Simply define the
            <code>height</code>
            property in the
            <code>jk-table</code>
            element to implement a fixed-header table without additional code.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot; height=&quot;250&quot;&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 },
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 },
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
    ];
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Fixed Column</h3>
        <p>For extensive horizontal content, columns can be fixed.</p>
        <p>
            Fixed columns require the
            <code>fixed</code>
            property, which accepts a
            <code>Boolean</code>
            or
            <code>left</code>
            /
            <code>right</code>
            to indicate left or right fixation.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot; height=&quot;250&quot; border&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;120&quot; /&gt;
        &lt;jk-table-column label=&quot;Province&quot; key=&quot;province&quot; width=&quot;120&quot; /&gt;
        &lt;jk-table-column label=&quot;City&quot; key=&quot;city&quot; width=&quot;120&quot; /&gt;
        &lt;jk-table-column label=&quot;Zip Code&quot; key=&quot;zip&quot; width=&quot;120&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; width=&quot;300&quot; /&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; fixed=&quot;right&quot; align=&quot;right&quot; width=&quot;80&quot; /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        {
            name: &quot;Zhang San&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 1000
        },
        {
            name: &quot;Li Si&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address:
                &quot;Jinan, Shandong Province, Jinan, Shandong Province, Jinan, Shandong Province, Jinan, Shandong Province, Jinan, Shandong Province&quot;,
            money: 10
        },
        {
            name: &quot;Li Mei&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 300
        },
        {
            name: &quot;Wang Wu&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 11.9
        },
        {
            name: &quot;Zhang San&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 1000
        },
        {
            name: &quot;Li Si&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 10
        },
        {
            name: &quot;Li Mei&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 300
        },
        {
            name: &quot;Wang Wu&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 11.9
        },
        {
            name: &quot;Zhang San&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 1000
        },
        {
            name: &quot;Li Si&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 10
        },
        {
            name: &quot;Li Mei&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 300
        },
        {
            name: &quot;Wang Wu&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 11.9
        }
    ];
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Fluid Height</h3>
        <p>When data dynamically changes, set a maximum height for the Table.</p>
        <p>
            Use the
            <code>max-height</code>
            property to specify the maximum height. If the table’s required height exceeds this, a scrollbar appears.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo6)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-table data=&quot;@model.tableData&quot; max-height=&quot;250&quot;&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;120&quot; /&gt;
            &lt;jk-table-column label=&quot;Province&quot; key=&quot;province&quot; width=&quot;120&quot; /&gt;
            &lt;jk-table-column label=&quot;City&quot; key=&quot;city&quot; width=&quot;120&quot; /&gt;
            &lt;jk-table-column label=&quot;Zip Code&quot; key=&quot;zip&quot; width=&quot;120&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; width=&quot;300&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; fixed=&quot;right&quot; align=&quot;right&quot; width=&quot;80&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-button @click=&quot;loadAll&quot;&gt;Load All&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;loadPart&quot;&gt;Load Part&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;clearData&quot;&gt;Clear All Data&lt;/jk-button&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
let demoData = [
    {
        name: &quot;Zhang San&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 1000
    },
    {
        name: &quot;Li Si&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address:
            &quot;Jinan, Shandong Province, Jinan, Shandong Province, Jinan, Shandong Province, Jinan, Shandong Province, Jinan, Shandong Province&quot;,
        money: 10
    },
    {
        name: &quot;Li Mei&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 300
    },
    {
        name: &quot;Wang Wu&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 11.9
    },
    {
        name: &quot;Zhang San&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 1000
    },
    {
        name: &quot;Li Si&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 10
    },
    {
        name: &quot;Li Mei&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 300
    },
    {
        name: &quot;Wang Wu&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 11.9
    },
    {
        name: &quot;Zhang San&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 1000
    },
    {
        name: &quot;Li Si&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 10
    },
    {
        name: &quot;Li Mei&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 300
    },
    {
        name: &quot;Wang Wu&quot;,
        date: &quot;2023-11-21&quot;,
        province: &quot;Shandong Province&quot;,
        city: &quot;Jinan&quot;,
        zip: &quot;251900&quot;,
        address: &quot;Jinan, Shandong Province&quot;,
        money: 11.9
    }
];
export default class extends Component {
    model = {
        tableData: [] as any
    };

    mounted() {
        this.loadAll();
    }

    loadAll() {
        this.model.tableData = demoData.slice(0);
    }
    loadPart() {
        this.model.tableData = demoData.slice(0, 3);
    }
    clearData() {
        this.model.tableData.length = 0;
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Multi-Level Header</h3>
        <p>For complex data structures, multi-level headers can display hierarchical relationships.</p>
        <p>
            Nest
            <code>jk-table-column</code>
            within another
            <code>jk-table-column</code>
            to implement multi-level headers.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo7)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot; border&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
        &lt;jk-table-column label=&quot;Personal Information&quot;&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;120&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot;&gt;
                &lt;jk-table-column label=&quot;Province&quot; key=&quot;province&quot; width=&quot;120&quot; /&gt;
                &lt;jk-table-column label=&quot;City&quot; key=&quot;city&quot; width=&quot;120&quot; /&gt;
                &lt;jk-table-column label=&quot;Zip Code&quot; key=&quot;zip&quot; width=&quot;120&quot; /&gt;
                &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; width=&quot;300&quot; /&gt;
            &lt;/jk-table-column&gt;
        &lt;/jk-table-column&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; width=&quot;150&quot; /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        {
            name: &quot;Zhang San&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 1000
        },
        {
            name: &quot;Li Si&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address:
                &quot;Jinan, Shandong Province, Jinan, Shandong Province, Jinan, Shandong Province, Jinan, Shandong Province, Jinan, Shandong Province&quot;,
            money: 10
        },
        {
            name: &quot;Li Mei&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 300
        },
        {
            name: &quot;Wang Wu&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 11.9
        },
        {
            name: &quot;Zhang San&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 1000
        },
        {
            name: &quot;Li Si&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 10
        },
        {
            name: &quot;Wang Wu&quot;,
            date: &quot;2023-11-21&quot;,
            province: &quot;Shandong Province&quot;,
            city: &quot;Jinan&quot;,
            zip: &quot;251900&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 11.9
        }
    ];
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Row Selection</h3>
        <p>
            Enable row selection with the
            <code>select</code>
            property. Setting
            <code>select</code>
            to
            <strong>true</strong>
            activates single-selection mode, while
            <code>mutiple</code>
            enables multi-selection.
        </p>
        <p>
            Add an
            <code>jk-table-column</code>
            component with
            <code>type</code>
            set to
            <strong>selection</strong>
            to display an auxiliary selection column.
            <strong>Note</strong>
            : If enabled, clicking the row no longer triggers selection.
        </p>
        <p>
            Use the
            <code>selected-change</code>
            event to monitor selection changes. Both single and multi-selection return an array of row data.
        </p>
        <p>Additional methods for controlling selected rows:</p>
        <ul>
            <li>
                <code>getSelectedRow</code>
                — Retrieves selected rows (single row in single-selection mode, multiple rows in multi-selection mode).
            </li>
            <li>
                <code>setSelectedRow</code>
                — Selects rows (can pass single or multiple rows; single-selection mode only selects the first row if multiple are provided).
            </li>
            <li>
                <code>clearSelectedRow</code>
                — Clears selected rows.
            </li>
            <li>
                <code>selectAll</code>
                — In multi-selection mode, selects all non-disabled data.
            </li>
        </ul>
        <p>Single-selection example:</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo8)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-table ref=&quot;table1&quot; data=&quot;@model.tableData&quot; select @selected-change=&quot;handleSelectedChange('table2')&quot;&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-table ref=&quot;table2&quot; data=&quot;@model.tableData&quot; select @selected-change=&quot;handleSelectedChange('table1')&quot;&gt;
            &lt;jk-table-column type=&quot;selection&quot; disabledMethod=&quot;@disabledMethod&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        //存放到model中，使用数据观察代理，以保证两个table行数据一致
        tableData: [
            { name: &quot;Zhang San&quot;, date: &quot;2023-11-01&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
            { name: &quot;Li Si&quot;, date: &quot;2023-11-02&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
            { name: &quot;Li Mei&quot;, date: &quot;2023-11-03&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
            { name: &quot;Wang Wu&quot;, date: &quot;2023-11-04&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
        ]
    };

    disabledMethod(row: any) {
        return row.name === &quot;Li Mei&quot;;
    }

    handleSelectedChange(e: VNode.Event&lt;any&gt;, syncTableName: string) {
        this.$getRef(syncTableName)?.component.setSelectedRow(e.data);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <p>Multi-selection example:</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo9)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-table
            ref=&quot;table1&quot;
            data=&quot;@model.tableData&quot;
            select
            multiple
            @selected-change=&quot;handleSelectedChange('table2')&quot;&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-table
            ref=&quot;table2&quot;
            data=&quot;@model.tableData&quot;
            select
            multiple
            @selected-change=&quot;handleSelectedChange('table1')&quot;&gt;
            &lt;jk-table-column type=&quot;selection&quot; disabledMethod=&quot;@disabledMethod&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-button @click=&quot;clear&quot;&gt;Clear&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;selectAll&quot;&gt;Select All&lt;/jk-button&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-table data=&quot;@model.tableData&quot; select multiple&gt;
            &lt;jk-table-column type=&quot;selection&quot; key=&quot;checked&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        tableData: [
            { name: &quot;Zhang San&quot;, date: &quot;2023-11-01&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
            { name: &quot;Li Si&quot;, date: &quot;2023-11-02&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
            { name: &quot;Li Mei&quot;, date: &quot;2023-11-03&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300, checked: true },
            { name: &quot;Wang Wu&quot;, date: &quot;2023-11-04&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
        ]
    };

    disabledMethod(row: any) {
        return row.name === &quot;Li Mei&quot;;
    }

    selectAll() {
        this.$getRef(&quot;table1&quot;)?.component.selectAll();
        this.$getRef(&quot;table2&quot;)?.component.selectAll();
    }

    clear() {
        this.$getRef(&quot;table1&quot;)?.component.clearSelectedRow();
        this.$getRef(&quot;table2&quot;)?.component.clearSelectedRow();
    }

    handleSelectedChange(e: VNode.Event&lt;any&gt;, syncTableName: string) {
        this.$getRef(syncTableName)?.component.setSelectedRow(e.data);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Sorting</h3>
        <p>Tables can be sorted for quick data lookup or comparison.</p>
        <p>
            Set the
            <code>sortable</code>
            property on a column to enable sorting (default
            <code>false</code>
            ). Use
            <code>default-sort</code>
            on the Table to set default sorting columns and order. Custom sorting rules can be defined via
            <code>sort-method</code>
            .
            <code>default-sort-order</code>
            defaults to
            <strong>ascending</strong>
            but can be set to
            <strong>descending</strong>
            .
        </p>
        <p>
            For backend sorting, set
            <code>sortable</code>
            to
            <code>custom</code>
            and listen to
            <code>sort-change</code>
            on the Table, which provides the current sort field and order.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo10)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot; default-sort=&quot;date&quot; default-sort-order=&quot;descending&quot;&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; sortable fixed=&quot;left&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; sortable /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-02&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-01&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-03&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-04&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
    ];
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <p>Custom sorting (simulating server-side sorting):</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo11)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData.value&quot; ref=&quot;table&quot; @sort-change=&quot;handleSortChange&quot;&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; sortable=&quot;custom&quot; fixed=&quot;left&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column
            label=&quot;Balance&quot;
            key=&quot;money&quot;
            headerAlign=&quot;right&quot;
            align=&quot;right&quot;
            sortable
            sort-method=&quot;@moneySortMethod&quot;
        /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, ShallowObserver, VNode } from &quot;@joker.front/core&quot;;
import { ColumnType, SortableOrderType } from &quot;../../../packages/table/store&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;
import { Loading } from &quot;../../../src&quot;;

// Table data array, containing user information
let tableData = [
    { name: &quot;Zhang San&quot;, date: &quot;2023-11-02&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
    { name: &quot;Li Si&quot;, date: &quot;2023-11-01&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
    { name: &quot;Li Mei&quot;, date: &quot;2023-11-03&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
    { name: &quot;Wang Wu&quot;, date: &quot;2023-11-04&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
];

export default class extends Component {
    // Perform shallow hijacking for the demo
    tableData = new ShallowObserver(tableData.slice(0));

    // Record the currently sorted column
    order?: string;

    // The current demo simulates delayed sorting only for the 'date' field, so the logic is relatively complex. Please adjust according to your own needs.
    async handleSortChange(e: VNode.Event&lt;{ column: ColumnType; order: SortableOrderType }&gt;) {
        // Simulate restoring data
        if (this.order &amp;&amp; e.data === undefined) {
            this.order = undefined;
            let loading = Loading({
                target: this.$getRef(&quot;table&quot;)
            });
            // Simulate a request
            await sleep(1500);

            loading.close();

            this.tableData.value = tableData.slice(0);
            return;
        }

        // If it's not the 'date' column, clear the marker
        if (e.data?.column.key !== &quot;date&quot;) {
            this.order = undefined;
            return;
        }

        if (e.data?.column.key === &quot;date&quot; &amp;&amp; this.order !== e.data.order) {
            this.order = e.data.order;
            let loading = Loading({
                target: this.$getRef(&quot;table&quot;)
            });
            // Simulate a request
            await sleep(1500);

            loading.close();

            this.tableData.value = tableData.slice(0).sort((a, b) =&gt; {
                if (e.data.order === &quot;ascending&quot;) {
                    return a.date &gt; b.date ? 1 : -1;
                } else {
                    return a.date &gt; b.date ? -1 : 1;
                }
            });
        }
    }

    // Sorting method for the balance column
    moneySortMethod(datas: Array&lt;any&gt;, col: ColumnType, order: SortableOrderType) {
        console.log(&quot;Custom sorting&quot;);
        return datas.sort((a, b) =&gt; {
            if (order === &quot;ascending&quot;) {
                return a.money &gt; b.money ? 1 : -1;
            } else {
                return a.money &gt; b.money ? -1 : 1;
            }
        });
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Filtering</h3>
        <p>Tables can be filtered to quickly locate desired data.</p>
        <p>
            Set
            <code>filter</code>
            and
            <code>filter-method</code>
            on a column to enable filtering.
            <code>filter</code>
            is an array—if omitted, it displays all available values for the column.
            <code>filter-method</code>
            determines what data is shown, receiving
            <code>current row data</code>
            ,
            <code>filter condition</code>
            , and
            <code>filter column</code>
            as arguments.
        </p>
        <p>
            <code>filter</code>
            can be configured as an array of
            <strong>string[]</strong>
            or with text translations, e.g.:
        </p>
        <pre><code class="language-js">[  
    { value: &quot;1&quot;, text: &quot;Male&quot; },  
    { value: &quot;0&quot;, text: &quot;Female&quot; }  
];  
</code></pre>
        <DemoContainer component="@(components.DEMO_JOKER_demo12)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot; default-sort=&quot;date&quot; default-sort-order=&quot;descending&quot;&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; sortable filter fixed=&quot;left&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column
            label=&quot;Balance&quot;
            key=&quot;money&quot;
            headerAlign=&quot;right&quot;
            align=&quot;right&quot;
            filter=&quot;@([
                { text: 'Less than 100', value: 1 },
                { text: 'Greater than 100', value: 2 }
            ])&quot;
            filter-method=&quot;@customFilter&quot;
        /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-02&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-01&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-03&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-04&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
    ];
    customFilter(row: any, filters: number[]) {
        for (let i = 0; i &lt; filters.length; i++) {
            let filter = filters[i];
            if ((filter === 1 &amp;&amp; row.money &lt; 100) || (filter === 2 &amp;&amp; row.money &gt; 100)) {
                return true;
            }
        }

        return false;
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Index Column</h3>
        <p>
            Configure
            <code>jk-table-column</code>
            with
            <code>type=&quot;index&quot;</code>
            to display an index column. Use the
            <code>index</code>
            property to set the starting index (default: 1).
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo13)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-table data=&quot;@tableData&quot;&gt;
            &lt;jk-table-column type=&quot;index&quot; index=&quot;@model.startIndex&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/DemoRow&gt;
    &lt;jk-button @click=&quot;handleClick&quot;&gt;Set starting index to 10&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
    ];
    model = {
        startIndex: 1
    };
    handleClick() {
        this.model.startIndex = 10;
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Custom Column Template</h3>
        <p>
            Customize column display by combining other components.
            <br />
            Use
            <code>RenderSection</code>
            to access
            <code>value</code>
            ,
            <code>row</code>
            ,
            <code>rowIndex</code>
            ,
            <code>columnIndex</code>
            ,
            <code>column</code>
            , and
            <code>store</code>
            (table data management). Refer to the demo for usage.
        </p>
        <p>
            The
            <strong>td</strong>
            section renders table cell content, while
            <strong>th</strong>
            renders headers.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo14)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@model.tableData&quot; select multiple dataChangeNotClearSelected&gt;
        &lt;jk-table-column type=&quot;selection&quot; fixed=&quot;left&quot; /&gt;
        &lt;jk-table-column type=&quot;index&quot; fixed=&quot;left&quot; /&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot;&gt;
            @section(&quot;td&quot;, data) {
                &lt;i class=&quot;jk-icon-time&quot; /&gt;@data.value
            }
        &lt;/jk-table-column&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;jk-table-column label=&quot;Operation&quot; headerAlign=&quot;right&quot; align=&quot;right&quot;&gt;
            @section(&quot;th&quot;) {
                &lt;i class=&quot;jk-icon-edit&quot;&gt;&lt;/i&gt;
                Operation
            }
            @section(&quot;td&quot;, data) {
                &lt;jk-button type=&quot;primary&quot; size=&quot;small&quot; @click=&quot;handleMoveDown(data)&quot;&gt;Move Down&lt;/jk-button&gt;
                &lt;jk-button type=&quot;danger&quot; size=&quot;small&quot; @click=&quot;handleDelete(data)&quot;&gt;Delete&lt;/jk-button&gt;
            }
        &lt;/jk-table-column&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { ColumnType, Store } from &quot;../../../packages/table/store&quot;;
import { Message, MessageBox } from &quot;../../../src&quot;;
import { moveDown, remove } from &quot;@joker.front/shared&quot;;

export default class extends Component {
    model = {
        tableData: [
            { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
            { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
            { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
            { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
        ]
    };

    handleDelete(
        e: VNode.Event,
        data: {
            // Current row value, will be retrieved only when column.key is configured
            value: any;
            // Current row data
            row: any;
            // Row index
            rowIndex: number;
            // Column index
            cellIndex: number;
            // Column data
            column: ColumnType;
            // Storage unit
            store: Store;
        }
    ) {
        MessageBox.confirm('Are you sure you want to delete &quot;' + data.row.name + '&quot;?', {
            callback: (action) =&gt; {
                if (action === &quot;confirm&quot;) {
                    remove(this.model.tableData, data.row);
                }
            }
        });
    }

    handleMoveDown(e: VNode.Event, data: any) {
        moveDown(this.model.tableData, data.rowIndex);

        console.log(this.model.tableData);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Expandable Row</h3>
        <p>
            For rows with extensive content and no horizontal scroll, expandable rows can be used.
            <br />
            Set
            <code>type=&quot;expand&quot;</code>
            and
            <code>section('expand', data)</code>
            to enable.
            <code>jk-table-column</code>
            templates render expanded content, where
            <code>data</code>
            includes
            <code>current row data</code>
            ,
            <code>row index</code>
            , and
            <code>store</code>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo15)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot; defaultExpandAll&gt;
        &lt;jk-table-column type=&quot;expand&quot;&gt;
            @section(&quot;expand&quot;, data) {
                &lt;ul class=&quot;expand-ul&quot;&gt;
                    &lt;li&gt;
                        Name: @data.row.name
                    &lt;/li&gt;
                    &lt;li&gt;
                        Date: @data.row.date
                    &lt;/li&gt;
                    &lt;li&gt;
                        Balance: @data.row.money
                        Yuan
                    &lt;/li&gt;
                    &lt;li&gt;
                        Address: @data.row.address
                    &lt;/li&gt;
                &lt;/ul&gt;
            }
        &lt;/jk-table-column&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
    ];
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Tree Table</h3>
        <p>
            Supports hierarchical data display. Rows with a
            <code>children</code>
            field are treated as tree data.
            <code>row-key</code>
            is required when rendering trees. Supports asynchronous child node loading via
            <code>lazy</code>
            (set to
            <code>true</code>
            ) and
            <code>load</code>
            function. Use
            <code>isLeafKey</code>
            to specify leaf nodes.
        </p>
        <blockquote>
            <p>
                Configure
                <code>childrenKey</code>
                and
                <code>isLeafKey</code>
                to define node attributes and leaf indicators.
            </p>
        </blockquote>
        <DemoContainer component="@(components.DEMO_JOKER_demo16)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot; row-key=&quot;name&quot;&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    tableData = [
        {
            name: &quot;Zhang San&quot;,
            date: &quot;2023-11-21&quot;,
            address: &quot;Jinan, Shandong Province&quot;,
            money: 1000,
            children: [
                { name: &quot;Zhang San 1&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
                {
                    name: &quot;Zhang San 2&quot;,
                    date: &quot;2023-11-21&quot;,
                    address: &quot;Jinan, Shandong Province&quot;,
                    money: 10,
                    children: [
                        { name: &quot;Zhang San 12&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
                        { name: &quot;Zhang San 22&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
                        { name: &quot;Zhang San 32&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 }
                    ]
                },
                { name: &quot;Zhang San 3&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 }
            ]
        },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
    ];
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <p>Asynchronous loading:</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo17)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-table data=&quot;@tableData&quot; row-key=&quot;name&quot; lazy load=&quot;@loadChildrenRow&quot;&gt;
        &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;180&quot; /&gt;
        &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; /&gt;
        &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
    &lt;/jk-table&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;

export default class extends Component {
    tableData = [
        { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
        { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, isLeaf: true, money: 10 },
        { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, isLeaf: true, money: 300 },
        { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, isLeaf: true, money: 11.9 }
    ];

    async loadChildrenRow(row: any, callBack: Function) {
        await sleep(1000);

        if (row.name === &quot;Zhang San&quot;) {
            row.children = [
                {
                    name: &quot;Zhang San 1&quot;,
                    date: &quot;2023-11-21&quot;,
                    address: &quot;Jinan, Shandong Province&quot;,
                    isLeaf: true,
                    money: 10
                },
                { name: &quot;Zhang San 2&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
                {
                    name: &quot;Zhang San 3&quot;,
                    date: &quot;2023-11-21&quot;,
                    address: &quot;Jinan, Shandong Province&quot;,
                    isLeaf: true,
                    money: 300
                },
                {
                    name: &quot;Zhang San 4&quot;,
                    date: &quot;2023-11-21&quot;,
                    address: &quot;Jinan, Shandong Province&quot;,
                    isLeaf: true,
                    money: 11.9
                }
            ];
        } else {
            row.children = [
                {
                    name: &quot;Zhang San 12&quot;,
                    date: &quot;2023-11-21&quot;,
                    address: &quot;Jinan, Shandong Province&quot;,
                    children: [],
                    money: 10
                },
                {
                    name: &quot;Zhang San 22&quot;,
                    date: &quot;2023-11-21&quot;,
                    address: &quot;Jinan, Shandong Province&quot;,
                    children: [],
                    money: 10
                },
                {
                    name: &quot;Zhang San 32&quot;,
                    date: &quot;2023-11-21&quot;,
                    address: &quot;Jinan, Shandong Province&quot;,
                    children: [],
                    money: 300
                },
                {
                    name: &quot;Zhang San 42&quot;,
                    date: &quot;2023-11-21&quot;,
                    address: &quot;Jinan, Shandong Province&quot;,
                    children: [],
                    money: 11.9
                }
            ];
        }

        callBack();
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <blockquote>
            <p>Note: Sorting, filtering, or index columns only apply to the top-level list, not child nodes.</p>
        </blockquote>
        <h3>Size</h3>
        <DemoContainer component="@(components.DEMO_JOKER_demo19)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-cell-group title=&quot;Large&quot;&gt;
        &lt;jk-table data=&quot;@model.tableData&quot; select multiple height=&quot;250&quot; size=&quot;large&quot;&gt;
            &lt;jk-table-column type=&quot;selection&quot; key=&quot;checked&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; width=&quot;200px&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/jk-cell-group&gt;
    &lt;jk-cell-group title=&quot;Default&quot;&gt;
        &lt;jk-table data=&quot;@model.tableData&quot; select multiple height=&quot;250&quot;&gt;
            &lt;jk-table-column type=&quot;selection&quot; key=&quot;checked&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; width=&quot;200px&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/jk-cell-group&gt;
    &lt;jk-cell-group title=&quot;Small&quot;&gt;
        &lt;jk-table data=&quot;@model.tableData&quot; select multiple height=&quot;250&quot; size=&quot;small&quot;&gt;
            &lt;jk-table-column type=&quot;selection&quot; key=&quot;checked&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; width=&quot;200px&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/jk-cell-group&gt;
    &lt;jk-cell-group title=&quot;Mini&quot;&gt;
        &lt;jk-table data=&quot;@model.tableData&quot; select multiple height=&quot;250&quot; size=&quot;mini&quot;&gt;
            &lt;jk-table-column type=&quot;selection&quot; key=&quot;checked&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Name&quot; key=&quot;name&quot; width=&quot;100&quot; fixed=&quot;left&quot; /&gt;
            &lt;jk-table-column label=&quot;Date&quot; key=&quot;date&quot; width=&quot;100&quot; /&gt;
            &lt;jk-table-column label=&quot;Address&quot; key=&quot;address&quot; width=&quot;200px&quot; /&gt;
            &lt;jk-table-column label=&quot;Balance&quot; key=&quot;money&quot; headerAlign=&quot;right&quot; align=&quot;right&quot; /&gt;
        &lt;/jk-table&gt;
    &lt;/jk-cell-group&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        tableData: []
    };
    created() {
        for (let i = 0; i &lt; 10; i++) {
            this.model.tableData.push(
                { name: &quot;Zhang San&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 1000 },
                { name: &quot;Li Si&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 10 },
                { name: &quot;Li Mei&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 300 },
                { name: &quot;Wang Wu&quot;, date: &quot;2023-11-21&quot;, address: &quot;Jinan, Shandong Province&quot;, money: 11.9 }
            );
        }
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Table Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>data</td>
                    <td>Displayed data</td>
                    <td>array</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>Custom class</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>height</td>
                    <td>
                        Table height (default: auto). If numeric, unit is
                        <code>px</code>
                        ; string sets
                        <code>style.height</code>
                        .
                    </td>
                    <td>string/number</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>max-height</td>
                    <td>
                        Maximum height (numeric or
                        <code>px</code>
                        ).
                    </td>
                    <td>string/number</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>stripe</td>
                    <td>Whether to use striped styling.</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>border</td>
                    <td>Whether to show vertical borders.</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>show-header</td>
                    <td>Whether to display headers.</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>row-class-name</td>
                    <td>
                        Row
                        <code>className</code>
                        callback (or fixed string for all rows).
                    </td>
                    <td>
                        Function({row, rowIndex})/String
                    </td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>row-style</td>
                    <td>
                        Row
                        <code>style</code>
                        callback (or fixed object for all rows).
                    </td>
                    <td>
                        Function({row, rowIndex})/Object
                    </td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>cell-class-name</td>
                    <td>
                        Cell
                        <code>className</code>
                        callback (or fixed string for all cells).
                    </td>
                    <td>
                        Function({row, column, rowIndex, columnIndex})/String
                    </td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>cell-style</td>
                    <td>
                        Cell
                        <code>style</code>
                        callback (or fixed object for all cells).
                    </td>
                    <td>
                        Function({row, column, rowIndex, columnIndex})/Object
                    </td>
                    <td>string</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>header-row-class-name</td>
                    <td>
                        Header row
                        <code>className</code>
                        callback (or fixed string for all headers).
                    </td>
                    <td>
                        Function({row, rowIndex})/String
                    </td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>header-row-style</td>
                    <td>
                        Header row
                        <code>style</code>
                        callback (or fixed object for all headers).
                    </td>
                    <td>
                        Function({row, rowIndex})/Object
                    </td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>header-cell-class-name</td>
                    <td>
                        Header cell
                        <code>className</code>
                        callback (or fixed string for all header cells).
                    </td>
                    <td>
                        Function({row, column, rowIndex, columnIndex})/String
                    </td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>header-cell-style</td>
                    <td>
                        Header cell
                        <code>style</code>
                        callback (or fixed object for all header cells).
                    </td>
                    <td>
                        Function({row, column, rowIndex, columnIndex})/Object
                    </td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>empty-text</td>
                    <td>
                        Text displayed when data is empty (can also use
                        <code>section=&quot;empty&quot;</code>
                        ).
                    </td>
                    <td>String</td>
                    <td>—</td>
                    <td>No Data</td>
                </tr>
                <tr>
                    <td>default-sort</td>
                    <td>Default sorted column.</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>default-sort-order</td>
                    <td>Default sorting order.</td>
                    <td>ascending/descending</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>childrenKey</td>
                    <td>Tree structure: specifies child node property name.</td>
                    <td>string</td>
                    <td>—</td>
                    <td>children</td>
                </tr>
                <tr>
                    <td>isLeafKey</td>
                    <td>Tree structure: specifies leaf node property name.</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>dataChangeNotClearSelected</td>
                    <td>Whether to clear selections after data changes.</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>defaultExpandAll</td>
                    <td>Whether to expand all rows by default.</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
            </tbody>
        </table>
        <h3>Table Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>selected-change</td>
                    <td>Triggered when selection changes.</td>
                    <td>Selected rows[]</td>
                </tr>
                <tr>
                    <td>sort-change</td>
                    <td>Triggered when sorting conditions change.</td>
                    <td>
                        {column, order}
                    </td>
                </tr>
                <tr>
                    <td>expand-change</td>
                    <td>Triggered when expanding/collapsing a row.</td>
                    <td>row, expand</td>
                </tr>
            </tbody>
        </table>
        <h3>Table Methods</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Method</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>clearSelectedRow</td>
                    <td>Clears user selections in multi-select tables.</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>selectAll</td>
                    <td>Toggles all rows' selection state.</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>setSelectedRow</td>
                    <td>Sets a specific row as selected in single-select tables.</td>
                    <td>row</td>
                </tr>
                <tr>
                    <td>clearSort</td>
                    <td>Clears sorting conditions (resets data).</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>clearFilter</td>
                    <td>
                        Clears all filter conditions (or specific columns via
                        <code>column.key</code>
                        array).
                    </td>
                    <td>column.key</td>
                </tr>
                <tr>
                    <td>sort</td>
                    <td>
                        Manual sorting (
                        <code>key</code>
                        : column,
                        <code>order</code>
                        : sorting order).
                    </td>
                    <td>key: string, order: string</td>
                </tr>
                <tr>
                    <td>getSelectRow</td>
                    <td>Gets selected rows.</td>
                    <td>—</td>
                </tr>
            </tbody>
        </table>
        <h3>Table-column Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>type</td>
                    <td>
                        Column type (
                        <code>selection</code>
                        for checkboxes,
                        <code>index</code>
                        for row numbers,
                        <code>expand</code>
                        for expandable rows).
                    </td>
                    <td>string</td>
                    <td>selection/index/expand</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>index</td>
                    <td>
                        Customize index for
                        <code>type=index</code>
                        (numeric or function).
                    </td>
                    <td>number, Function(index)</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>key</td>
                    <td>
                        Column key (required for
                        <code>filter-change</code>
                        events).
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>label</td>
                    <td>Column header text.</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>width</td>
                    <td>Column width.</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>fixed</td>
                    <td>
                        Whether column is fixed (
                        <code>true</code>
                        /
                        <code>left</code>
                        /
                        <code>right</code>
                        ).
                    </td>
                    <td>string, boolean</td>
                    <td>true/left/right</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>sortable</td>
                    <td>
                        Whether column is sortable (
                        <code>custom</code>
                        for remote sorting).
                    </td>
                    <td>boolean, string</td>
                    <td>true/false/custom</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>sort-method</td>
                    <td>
                        Custom sorting function (only if
                        <code>sortable=true</code>
                        ).
                    </td>
                    <td>Function</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>align</td>
                    <td>Alignment.</td>
                    <td>String</td>
                    <td>left/center/right</td>
                    <td>left</td>
                </tr>
                <tr>
                    <td>header-align</td>
                    <td>Header alignment (defaults to table alignment if unset).</td>
                    <td>String</td>
                    <td>left/center/right</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>Column class.</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>filter</td>
                    <td>
                        Filter options (must have
                        <code>text</code>
                        and
                        <code>value</code>
                        , filters current column).
                    </td>
                    <td>
                        Array&lt;{text, value}&gt; or string[]
                    </td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>filter-method</td>
                    <td>
                        Custom filter function (returns
                        <code>true</code>
                        to display).
                    </td>
                    <td>Function(row, filters, col)</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
            </tbody>
        </table>
        <h3>Table-column Section</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>td</td>
                    <td>
                        Custom column content ({value, row, rowIndex, column, columnIndex, store}).
                    </td>
                </tr>
                <tr>
                    <td>th</td>
                    <td>
                        Custom header content ({column, columnIndex, store}).
                    </td>
                </tr>
                <tr>
                    <td>expand</td>
                    <td>
                        Expandable row content ({row, rowIndex, store}).
                    </td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo9 from "../../components/table/demo9.joker";
import DEMO_JOKER_demo8 from "../../components/table/demo8.joker";
import DEMO_JOKER_demo7 from "../../components/table/demo7.joker";
import DEMO_JOKER_demo6 from "../../components/table/demo6.joker";
import DEMO_JOKER_demo5 from "../../components/table/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/table/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/table/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/table/demo2.joker";
import DEMO_JOKER_demo19 from "../../components/table/demo19.joker";
import DEMO_JOKER_demo17 from "../../components/table/demo17.joker";
import DEMO_JOKER_demo16 from "../../components/table/demo16.joker";
import DEMO_JOKER_demo15 from "../../components/table/demo15.joker";
import DEMO_JOKER_demo14 from "../../components/table/demo14.joker";
import DEMO_JOKER_demo13 from "../../components/table/demo13.joker";
import DEMO_JOKER_demo12 from "../../components/table/demo12.joker";
import DEMO_JOKER_demo11 from "../../components/table/demo11.joker";
import DEMO_JOKER_demo10 from "../../components/table/demo10.joker";
import DEMO_JOKER_demo1 from "../../components/table/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo9,
        DEMO_JOKER_demo8,
        DEMO_JOKER_demo7,
        DEMO_JOKER_demo6,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo19,
        DEMO_JOKER_demo17,
        DEMO_JOKER_demo16,
        DEMO_JOKER_demo15,
        DEMO_JOKER_demo14,
        DEMO_JOKER_demo13,
        DEMO_JOKER_demo12,
        DEMO_JOKER_demo11,
        DEMO_JOKER_demo10,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>