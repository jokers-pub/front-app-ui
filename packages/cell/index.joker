<template>
    <div
        class="@([
            'jk-cell',
            props.class,
            size,
            props.center && 'is-center',
            titleAlign && 'title-align-' + titleAlign,
            $listeners.click && 'is-click'
        ])"
        @click="handleClick">
        @if($sections.leftIcon) {
            @RenderSection("leftIcon")
        }
        else if(props.icon) {
            <i class="left-icon @props.icon" />
        }
        @if($sections.title || props.title || $sections.description || props.description) {
            <div class="title">
                @if($sections.title || props.title) {
                    @if($sections.title) {
                        @RenderSection("title")
                    }
                    else {
                        <span>@props.title</span>
                    }
                }
                @if($sections.description || props.description) {
                    <div class="description">
                        @if($sections.description) {
                            @RenderSection("description")
                        }
                        else {
                            @props.description
                        }
                    </div>
                }
            </div>
        }
        <div class="content-container">
            <div class="content">
                @if($sections.default) {
                    @RenderSection()
                }
                else {
                    @props.value
                }
            </div>
            @if(props.arrow || $sections.rightIcon) {
                <div>
                    @if($sections.rightIcon) {
                        @RenderSection("rightIcon")
                    }
                    else {
                        <i class="right-icon @arrowIcon" />
                    }
                </div>
            }
        </div>
    </div>
</template>
<script>
import { Component, VNode } from "@joker.front/core";
import { componentName } from "../utils";

export default class extends Component<{
    class: string;
    title: string;
    titleAlign?: "top" | "left";
    description: string;
    value: string;
    size: "large" | "small" | "mini";
    icon: string;
    arrow: boolean;
    arrowDirection?: "top" | "bottom" | "left";
    center: boolean;
}> {
    get size() {
        if (this.props.size) return this.props.size;

        let group = this.$root.closest(
            (n) => n instanceof VNode.Component && n.component.name === componentName("cell-group")
        )?.component;

        return group?.props.size;
    }

    get arrowIcon() {
        switch (this.props.arrowDirection) {
            case "top":
                return "jk-icon-arrow-up";
            case "bottom":
                return "jk-icon-arrow-down";
            case "left":
                return "jk-icon-arrow-left";
        }

        return "jk-icon-arrow-right";
    }

    get titleAlign() {
        if (this.props.titleAlign) return this.props.titleAlign;

        if (!this.props.title && !this.$sections.title && !this.props.description && !this.$sections.description) {
            return "top";
        }
    }

    handleClick(e: VNode.Event) {
        this.$trigger("click", undefined, e);
    }
}
</script>

<style lang="scss" scoped>
.jk-cell {
    box-sizing: border-box;
    width: 100%;
    padding: 10px 16px;
    color: var(--jk-color-text-regular);
    font-size: 14px;
    line-height: 24px;
    background: var(--jk-background-color-default);
    display: flex;
    position: relative;
    overflow: hidden;
    .left-icon,
    .right-icon {
        height: 24px;
        font-size: 14px;
        line-height: 24px;
    }

    .left-icon {
        margin-right: 4px;
    }
    .right-icon {
        margin-left: 4px;
        color: var(--jk-color-text-regular);
    }
    .title {
        color: var(--jk-color-text-primary);

        .description {
            margin-top: 4px;
            color: var(--jk-color-text-secondary);
            font-size: 12px;
            line-height: 18px;
        }
    }

    .content-container {
        flex: 1;
    }

    .content-container {
        color: var(--jk-color-text-secondary);
        font-size: inherit;
        text-align: right;
        vertical-align: middle;
        word-wrap: break-word;
        position: relative;
        display: flex;

        .content {
            flex: 1;
        }
    }
    &::after {
        box-sizing: border-box;
        content: " ";
        pointer-events: none;
        right: 16px;
        bottom: 0;
        left: 16px;
        border-bottom: 1px solid var(--jk-border-color-lighter);
        position: absolute;
        transform: scaleY(0.5);
    }

    &:last-child::after {
        display: none;
    }

    &.large {
        padding: 12px 16px;
        .left-icon,
        .right-icon {
            font-size: 16px;
        }
        .title {
            font-size: 16px;
            .description {
                font-size: 14px;
            }
        }
    }

    &.small {
        padding: 8px 16px;
        .left-icon,
        .right-icon {
            font-size: 12px;
        }
    }

    &.mini {
        padding: 6px 16px;
        font-size: 12px;
        .left-icon,
        .right-icon {
            font-size: 12px;
        }
    }

    &.is-center {
        align-items: center;
    }

    &.title-align-right {
        .title {
            text-align: right;
        }
    }

    &.title-align-top {
        text-align: left;
        flex-direction: column;

        .title {
            width: 100%;
            text-align: left;
            width: auto;
            margin-bottom: 5px;
        }

        .content-container {
            text-align: left;
        }
    }

    &.is-click {
        cursor: pointer;

        &:active {
            background: var(--jk-background-color-base);
        }
    }
}
</style>