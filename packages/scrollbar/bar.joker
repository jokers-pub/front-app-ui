<template>
    <div ref="container" class="jk-scrollbar-bar is-@bar.key @(model.showBar?'is-scolling':'')" size="@props.size">
        <div class="thumb" ref="thumb" style="@style"></div>
    </div>
</template>
<script>
import { Component, VNode } from "@joker.front/core";
import { componentName } from "../utils";

const BAR_MAP = {
    vertical: {
        offset: "offsetHeight",
        scroll: "scrollTop",
        scrollSize: "scrollHeight",
        size: "height",
        key: "vertical",
        axis: "Y",
        client: "clientY",
        direction: "top"
    },
    horizontal: {
        offset: "offsetWidth",
        scroll: "scrollLeft",
        scrollSize: "scrollWidth",
        size: "width",
        key: "horizontal",
        axis: "X",
        client: "clientX",
        direction: "left"
    }
};

function renderThumbStyle(move: string, size: string, bar: (typeof BAR_MAP)["horizontal"]) {
    let translate = `translate${bar.axis}(${move}%)`;

    let style: string[] = [];

    if (size !== undefined && size !== "") {
        style.push(`${bar.size}:${size}`);
    }
    style.push(`transform:${translate}`);
    style.push(`-ms-transform:${translate}`);
    style.push(`-webkit-transform:${translate}`);

    return style.join(";");
}

export default class extends Component<{
    vertical: boolean;
    size: string;
    move: string;
}> {
    model = {
        showBar: false
    };

    get bar() {
        return BAR_MAP[this.props.vertical ? "vertical" : "horizontal"];
    }

    get style() {
        return renderThumbStyle(this.props.move!, this.props.size!, this.bar);
    }

    get wrap() {
        return this.$rootVNode?.closest((n) => {
            return n instanceof VNode.Component && n.component.name === componentName("scrollbar");
        })?.component?.wrapEl;
    }

    showBarTimer: any;
    mounted() {
        this.$watch(
            () => this.props.move,
            () => {
                window.clearTimeout(this.showBarTimer);
                this.model.showBar = true;

                this.showBarTimer = setTimeout(() => {
                    this.model.showBar = false;
                }, 300);
            }
        );
    }
}
</script>

<style lang="scss" scoped>
.jk-scrollbar-bar {
    position: absolute;
    right: 2px;
    bottom: 2px;
    z-index: 1;
    border-radius: 4px;
    opacity: 0;
    transition: opacity 120ms ease-out;
    pointer-events: none;
    &.is-horizontal {
        height: 6px;
        width: 100%;

        .thumb {
            height: 100%;
        }
    }

    &.is-vertical {
        width: 6px;
        top: 2px;

        .thumb {
            width: 100%;
        }
    }

    .thumb {
        position: relative;
        display: block;
        width: 0;
        height: 0;
        border-radius: inherit;
        background-color: var(--jk-scrollbar-background-color);
    }

    &.is-scolling {
        opacity: 1 !important;
    }
}
</style>