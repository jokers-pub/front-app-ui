<template>
    <JokerDrawer ref="drawer" direction="bottom" showHeader="@false" size="auto">
        <div class="jk-action-sheet">
            @if($sections.description || props.description) {
                <div class="description">
                    @if($sections.description) {
                        @RenderSection("description")
                    }
                    else if(props.description) {
                        @props.description
                    }
                </div>
            }
            @for(let item of props.options) {
                <div class="@(['item', item.disabled && 'is-disabled'])" @click="handleClick(item)">
                    @if($sections.item) {
                        @RenderSection("default", item)
                    }
                    else {
                        @if(item.icon) {
                            <i class="@item.icon" />
                        }
                        @item.label
                        @if(item.description) {
                            <p class="description">
                                @item.description
                            </p>
                        }
                    }
                </div>
            }
            @if(props.showCancel) {
                <div class="cancel-container">
                    <div class="btn" @click="handleCancelClick">
                        @props.cancelText
                    </div>
                </div>
            }
        </div>
    </JokerDrawer>
</template>
<script>
import { Component } from "@joker.front/core";
import JokerDrawer from "../drawer/index.joker";
import { VNode } from "@joker.front/core";
import { getValueByLang } from "../utils/lang";

export default class extends Component<{
    options: Array<{
        label?: string;
        value?: string;
        disabled?: boolean;
        icon?: string;
    }>;
    description: string;
    showCancel: boolean;
    cancelText: string;
}> {
    propsOption = {
        cancelText: getValueByLang("cancel")
    };
    model = {};
    components = {
        JokerDrawer
    };
    open() {
        this.$getRef("drawer")?.component.open();
    }
    handleClick(e: VNode.Event, item: any) {
        if (item.disabled) return;

        this.$getRef("drawer")?.component.close();
        this.$trigger("select", item);
    }
    handleCancelClick() {
        this.$trigger("cancel");
        this.$getRef("drawer")?.component.close();
    }
}
</script>

<style lang="scss" scoped>
.jk-action-sheet {
    > .description {
        font-size: 16px;
        padding: 14px;
        line-height: 20px;
        text-align: center;
        color: var(--jk-color-text-placeholder);
        border-bottom: solid 1px var(--jk-border-color-extra-light);
    }
    .item {
        font-size: 16px;
        padding: 16px;
        line-height: 22px;
        text-align: center;
        color: var(--jk-color-text-regular);
        cursor: pointer;

        &.is-disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }

        &:active {
            background: var(--jk-background-color-base);
        }

        i {
            font-size: 18px;
            margin-right: 8px;
        }
        p.description {
            font-size: 12px;
            margin-top: 8px;
            line-height: 18px;
            color: var(--jk-color-text-placeholder);
        }
    }

    .cancel-container {
        background: var(--jk-background-color-base);
        padding-top: 10px;
        .btn {
            background: #fff;
            font-size: 16px;
            padding: 16px;
            line-height: 22px;
            text-align: center;
            color: var(--jk-color-text-regular);
            cursor: pointer;
            &:active {
                background: var(--jk-background-color-base);
            }
        }
    }
}
</style>