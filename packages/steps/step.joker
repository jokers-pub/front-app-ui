<template>
    <div style="@style" class="@(['jk-step', 'is-' + direction])">
        <!-- icon & line -->
        <div class="@(['head', 'is-' + currentStatus])">
            <div class="line">
                <i class="line-inner"></i>
            </div>
            <div class="@(['icon', 'is-' + (props.icon ? 'icon' : 'text')])">
                @if(currentStatus !== "success" && currentStatus !== "error") {
                    @if($sections.icon) {
                        @RenderSection("icon")
                    }
                    else {
                        @if(props.icon) {
                            <i class="@(['icon-inner', props.icon])"></i>
                        }
                        else {
                            <div class="icon-inner">
                                @(model.index + 1)
                            </div>
                        }
                    }
                }
                else {
                    <i
                        class="@(['icon-inner is-status', currentStatus === 'success' ? 'jk-icon-check' : 'jk-icon-close'])"></i>
                }
            </div>
        </div>
        <!-- title & description -->
        <div class="main">
            <div ref="title" class="@(['title', 'is-' + currentStatus])">
                @if($sections.title) {
                    @RenderSection("title")
                }
                else {
                    @props.title
                }
            </div>
            <div class="@(['description', 'is-' + currentStatus])">
                @if($sections.description) {
                    @RenderSection("description")
                }
                else {
                    @props.description
                }
            </div>
        </div>
    </div>
</template>
<script>
import { Component, VNode } from "@joker.front/core";
import { componentName } from "../utils";

export default class extends Component<{ title: string; icon: string; description: string }> {
    name = componentName("step");
    model = { internalStatus: "", index: 0 };

    beforeDestroy() {
        this.group?.updateSteps();
    }
    group: any;
    created() {
        this.group = this.$root?.closest((n) => {
            return n instanceof VNode.Component && n.component?.name === componentName("steps");
        })?.component;
    }
    mounted() {
        this.group?.updateSteps();

        this.$watch(
            () => [this.group?.model.active],
            () => {
                this.updateStatus();
            }
        );
    }

    get currentStatus() {
        return this.model.internalStatus;
    }

    get prevStatus() {
        let prevStep = this.group?.model.steps[this.model.index];
        return prevStep ? prevStep.currentStatus : "wait";
    }

    get direction() {
        return this.group?.props.direction;
    }
    get isVertical() {
        return this.group?.props.direction === "vertical";
    }

    get isLast() {
        if (this.group) {
            let steps = this.group.model.steps;
            return steps.length - 1 === this.model.index;
        }
    }

    get stepsCount() {
        return this.group?.model.steps.length;
    }

    get space() {
        return this.group?.props.space;
    }

    updateStatus() {
        let currentActive = this.group?.model.active || 0;
        if (currentActive > this.model.index) {
            this.model.internalStatus = "finish";
        } else if (currentActive === this.model.index && this.prevStatus !== "error") {
            this.model.internalStatus = "process";
        } else {
            this.model.internalStatus = "wait";
        }
    }
}
</script>

<style lang="scss" scoped>
.jk-step {
    flex: 1;

    .head {
        position: relative;
        width: 100%;
        &.is-process {
            color: var(--jk-color-primary);
            border-color: var(--jk-color-primary);
        }
        &.is-wait {
            color: var(--jk-color-info-light-4);
            border-color: var(--jk-color-info-light-4);
        }
        &.is-success {
            color: var(--jk-color-primary);
            border-color: var(--jk-color-primary);
            .line {
                background-color: var(--jk-color-primary);
            }
        }
        &.is-error {
            color: var(--jk-color-danger);
            border-color: var(--jk-color-danger);
        }
        &.is-finish {
            color: var(--jk-color-primary);
            border-color: var(--jk-color-primary);
            .line {
                background-color: var(--jk-color-primary);
            }
        }
        .icon {
            position: relative;
            z-index: 1;
            display: inline-flex;
            justify-content: center;
            align-items: center;
            width: 20px;
            height: 20px;
            font-size: 14px;
            box-sizing: border-box;
            background: var(--jk-background-color-default);
            transition: 0.15s ease-out;
            &.is-text {
                border-radius: 50%;
                border: 2px solid;
                border-color: inherit;
            }
            &.is-icon {
                width: 40px;
            }
            .icon-inner {
                display: inline-block;
                user-select: none;
                text-align: center;
                font-weight: 700;
                line-height: 1;
                color: inherit;
                &[class*="jk-icon"]:not(.is-status) {
                    font-size: 20px;
                    font-weight: 400;
                }
                &.is-status {
                    transform: translateY(1px);
                }
            }
        }
    }
    .main {
        white-space: normal;
        text-align: center;
        text-align: left;
        .title {
            font-size: 14px;
            line-height: 38px;
            &.is-process {
                font-weight: 700;
                color: var(--jk-color-primary);
            }
            &.is-wait {
                color: var(--jk-color-info-light-4);
            }
            &.is-success {
                color: var(--jk-color-primary);
            }
            &.is-error {
                color: var(--jk-color-danger);
            }
            &.is-finish {
                color: #409eff;
            }
        }
        .description {
            margin-top: -5px;
            font-size: 12px;
            line-height: 20px;
            font-weight: 400;
            &.is-process {
                color: var(--jk-color-primary);
            }

            &.is-wait {
                color: var(--jk-color-info-light-4);
            }

            &.is-success {
                color: var(--jk-color-primary);
            }

            &.is-error {
                color: var(--jk-color-danger);
            }

            &.is-finish {
                color: #409eff;
            }
        }
    }
    &.is-horizontal {
        display: inline-block;
        .head {
            .icon {
                transform: translateX(-50%);
            }
        }
        .main {
            transform: translateX(-50%);
            text-align: center;
        }
        &:first-of-type {
            text-align: left;
            .head {
                .icon {
                    transform: translateX(0);
                }
            }
            .main {
                transform: translateX(0);
                text-align: left;
            }
        }
        &:last-of-type {
            right: 10px;
            top: 10px;
            position: absolute;
            text-align: right;
            .head {
                .line {
                    display: none;
                }
                .icon {
                    transform: translateX(0);
                }
            }

            .main {
                transform: translateX(0);
                text-align: right;
            }
        }

        .line {
            height: 2px;
            top: 8px;
            left: 0;
            right: 0;
        }
    }
    &.is-vertical {
        padding: 10px 10px 10px 0px;
        display: flex;
        .head {
            flex-grow: 0;
            width: 24px;
            text-align: center;
        }
        .main {
            padding: 0px 10px 10px 10px;
            flex-grow: 1;
            border-bottom: solid 1px var(--jk-border-color-extra-light);
        }
        .title {
            line-height: 24px;
            padding-bottom: 8px;
        }
        .line {
            width: 2px;
            top: 0;
            bottom: -20px;
            left: 11px;
        }
        .icon.is-icon {
            width: 24px;
        }

        &:last-of-type {
            .head {
                .line {
                    display: none;
                }
            }
            .main {
                border: none;
            }
        }
    }

    .line {
        position: absolute;
        border-color: inherit;
        background-color: var(--jk-color-info-light-4);
    }
}
</style>